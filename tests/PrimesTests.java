package tests;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import math.Primes;
import java.util.Arrays;


public class PrimesTests {
	@Test
	public void testIsPrime1() {
		boolean answer = Primes.isPrime(11);
		assertTrue("", answer);		
	}
	@Test
	public void testIsPrime2() {
		boolean answer = Primes.isPrime(32);
		assertFalse("", answer);		
	}
	@Test
	public void testIsPrime3() {
		boolean flag = false;
		int[] tests = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 
				107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
				173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 
				239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 
				311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 
				383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 
				457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 
				541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
				613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 
				683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 
				769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 
				857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 
				941, 947, 953, 967, 971, 977, 983, 991, 997};
		for(int x : tests) {
			flag = Primes.isPrime(x);
			if(flag==false) break;
		}
		assertTrue("", flag);		
	}
	@Test
	public void testIsPrime4() {
		boolean flag = false;
		int[] tests = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 
				107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
				173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 
				239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 
				311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 
				383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 
				457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 
				541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
				613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 
				683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 
				769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 
				857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 
				941, 947, 953, 967, 971, 977, 983, 991, 997, 32};
		for(int x : tests) {
			flag = Primes.isPrime(x);
			if(flag==false) break;
		}
		assertFalse("", flag);		
	}
	@Test
	public void testFindNextPrime1() {
		int next = Primes.findNextPrime(5);
		assertEquals("", 7, next);		
	}
	@Test
	public void testFindNextPrime2() {
		int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 
				107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
				173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 
				239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 
				311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 
				383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 
				457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 
				541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
				613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 
				683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 
				769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 
				857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 
				941, 947, 953, 967, 971, 977, 983, 991, 997};
		int[] tests = new int[primes.length];
		for(int i=0; i<primes.length; i++) {
			tests[i] = Primes.findNextPrime(primes[i]);
		}
		int[] thisIsTheAnswer = {3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 
				109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 
				181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 
				257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 
				337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 
				419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 
				491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 
				587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 
				659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 
				751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 
				839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 
				937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009};
		
		assertTrue("", Arrays.equals(thisIsTheAnswer, tests));
	}
	
	@Test
	public void testFindNextPrime3() {
		int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 
				107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 
				173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 
				239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 
				311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 
				383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 
				457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 
				541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 
				613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 
				683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 
				769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 
				857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 
				941, 947, 953, 967, 971, 977, 983, 991, 997};
		int[] tests = new int[primes.length];
		for(int i=0; i<primes.length; i++) {
			tests[i] = Primes.findNextPrime(primes[i]);
		}
		int[] thisIsTheAnswer = {3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 
				43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 
				109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 
				181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 
				257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 
				337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 
				419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 
				491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 
				587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 
				659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 
				751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 
				839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 
				937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1008};
		
		assertFalse("", Arrays.equals(thisIsTheAnswer, tests));
	}

}
